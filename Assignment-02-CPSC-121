/* ----------------------------------------------------------------------------
 * Copyright &copy; 2015 Ben Blazak <bblazak@fullerton.edu>
 *                  2015 Samir Mandal <mandalsamir@fullerton.edu>
 * Released under the [MIT License] (http://opensource.org/licenses/MIT)
 * ------------------------------------------------------------------------- */

/**
 * A program to read unsigned integers from a text file and separate them into
 * two files, one for primes, another for composites.
 */


#include <iostream>
using std::cout;
using std::cin;
using std::endl;


#include <fstream>
using std::ofstream;
using std::ifstream;

#include <string>
using std::string;


int find_max(const string& infilename);
void sieve(const int size, bool primes[]);
int write_primes(const int size,
	bool primes[],
	const string& infilename,
	const string& outfilename);
int write_composites(const int size,
	bool primes[],
	const string& infilename,
	const string& outfilename);


int main() {
	int max = find_max("input.txt");
	if (max == -1) {
		cout << "ERROR in `find_max()`" << endl;
		return 1;  // error
	}

	bool * primes = (bool *)malloc(sizeof(bool) * (max + 1));;
	sieve(max + 1, primes);

	int ret;  // for storing return values, to check for error codes
			  //
	ret = write_primes(max + 1, primes, "input.txt", "primes.txt");
	if (ret == -1) {
		cout << "ERROR in `write_primes()`" << endl;
		return 1;  // error
	}
	//
	ret = write_composites(max + 1, primes, "input.txt", "composites.txt");
	if (ret == -1) {
		cout << "ERROR in `write_composites()`" << endl;
		return 1;  // error
	}

	return 0;  // success
}

// ----------------------------------------------------------------------------
/* Finds the max integer from input.txt*/

int find_max(const string& infilename) {

	ifstream infile(infilename);

	int max_val = 0, current_val;

	infile >> current_val;

	while (infile.good()) {
		if (current_val > max_val) {
			max_val = current_val;
		}
		infile >> current_val;
	}

//	cout << "max value" << max_val << endl;

	return max_val;
}

// ----------------------------------------------------------------------------
/*Sieves function*/
void sieve(const int size, bool primes[]) {

	for (int i = 1; i <= size; i++)
	{
		primes[i] = true;
	}

	for (int i = 2; i <= sqrt(size); i++) {

		if (primes[i] == true) {
		for (int j = i*i; j < size; j = j + i) {
			primes[j] = false;
			}
		}

	}

}

// ----------------------------------------------------------------------------
/*Write primes function*/

int write_primes(const int size, bool primes[], const string& infilename,
	const string& outfilename) {

	ifstream infile(infilename);
	ofstream outfile(outfilename);

	if (!infile) {
		cout << "error in opening file" << endl;
		return -1;
	}

	if (!outfile) {
		cout << "error in opening file" << endl;
		return -1;
	}
	
	int n;

	infile >> n;

	while (infile.good()) {
		if (primes[n]== true) // checks the primes
		outfile << n << endl;
		infile >> n;
	}

	return 0;
}

// ----------------------------------------------------------------------------
/*write primes function*/

int write_composites(const int size, bool primes[], const string& infilename,
	const string& outfilename) {

	ifstream infile(infilename);
	ofstream outfile(outfilename);

	if (!infile) {
		cout << "error in opening file" << endl;
		return -1;
	}

	if (!outfile) {
		cout << "error in opening file" << endl;
		return -1;
	}

	int n;

	infile >> n;

	while (infile.good()) {
		if (primes[n] == false)// checks the composites
			outfile << n << endl;
		infile >> n;
	}

	return 0;
}
